/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


package cateringreservationsystem;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import java.awt.event.KeyEvent;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ButtonModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author Edris
 */
public class ResForm extends javax.swing.JInternalFrame {

    
    public Connection con;
    public Statement state;
    public String sql;
    public String pangan;
    public ResForm() {
        initComponents();
        
        dugo.setText("Dugo - dugo");
        lechon.setText("Lechon");
        steak.setText("Beaf Steak");
        bihon.setText("Pansit Bihon");
        paklay.setText("Paklay");
        sweet.setText("Sweet and Sour Fish");
        humba.setText("Humba");
        lumpia.setText("Lumpia");
        fried.setText("Fried Chicken");
        mango.setText("Mango Float");
        mac.setText("DMacaroni Salad");
        buko.setText("Buko Salad");
        tap.setText("Tapioca Salad");
        glass.setText("Softdrinks in glass bottle");
        plas.setText("Softdrinks in plastic bottle");
        tent.setText("Tent");
        chair.setText("Chair");
        table.setText("Table");
        
        warnDugo.setVisible(false);
        warnLechon.setVisible(false);
        warnFish.setVisible(false);
        warnHumba.setVisible(false);
        warnBihon.setVisible(false);
        warnPak.setVisible(false);
        warnBeaf.setVisible(false);
        warnLumpia.setVisible(false);
        warnFried.setVisible(false);
        warnP.setVisible(false);
        warnG.setVisible(false);
        warnC.setVisible(false);
        warnT.setVisible(false);
        warnTnt.setVisible(false);

       /* try
        {
            Class.forName("com.mysql.jdbc.Driver");
            con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/cateringsystem?zeroDateTimeBehavior=convertToNull","root", "");
            state = (Statement) con.createStatement();
            
            ResultSet result = state.executeQuery("SELECT `Name` FROM `users`");            
            while(result.next())
            {
                
                result.getString("Name");
            }
            con.close();
            //welcome.setText("Name");
        }
        catch(ClassNotFoundException | SQLException c)
        {
            JOptionPane.showMessageDialog(null, c);
        }
       //jTextField1.setText();*/
       // Ngan();
       //UserLogForm user;
       //jTextField1.setText(user.model.getSelectedItem().toString());
    }
    //UserLogForm user;
       //jTextField1.setText(user.model.getSelectedItem().toString());
    public void Ngan()
    {
        
        //pangan = user.model.getSelectedItem().toString();
        //jTextField1.setText(user.Name.getSelectedObjects().toString());
    }
   /* final void display()
    {
        welcome.setText(name);
    }*/
    
   /* public void trigger()
    {
        if((!warnFish.isVisible() && fishQuan.getText().isEmpty()) || (!warnHumba.isVisible() && humbaQuan.getText().isEmpty()) || (!warnLechon.isVisible() && lechonQuan.getText().isEmpty()) || (!warnBeaf.isVisible() && beafQuan.getText().isEmpty()) || (!warnBihon.isVisible() && bihonQuan.getText().isEmpty()) || (!warnDugo.isVisible() && dugoQuan.getText().isEmpty()) || (!warnPak.isVisible() && pakQuan.getText().isEmpty()) || (!warnLumpia.isVisible() && lump.getText().isEmpty()) || (!warnFried.isVisible() && pakQuan.getText().isEmpty()) || (!warnP.isVisible() && quanP.getText().isEmpty()) || (!warnG.isVisible() && quanG.getText().isEmpty()) || (!warnC.isVisible() && quanC.getText().isEmpty()) || (!warnT.isVisible() && quanT.getText().isEmpty()) || (!warnTnt.isVisible() && quanTnt.getText().isEmpty()) )
        {
            JOptionPane.showMessageDialog(this, "You have chosen: \n" + food,"",JOptionPane.PLAIN_MESSAGE);
        }
    }*/
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        event = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        mac = new javax.swing.JCheckBox();
        mango = new javax.swing.JCheckBox();
        buko = new javax.swing.JCheckBox();
        tap = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lumpia = new javax.swing.JCheckBox();
        lump = new javax.swing.JTextField();
        warnLumpia = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        fried = new javax.swing.JCheckBox();
        fry = new javax.swing.JTextField();
        warnFried = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        glass = new javax.swing.JCheckBox();
        quanG = new javax.swing.JTextField();
        warnG = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        plas = new javax.swing.JCheckBox();
        quanP = new javax.swing.JTextField();
        warnP = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        dugoQuan = new javax.swing.JTextField();
        warnDugo = new javax.swing.JLabel();
        dugo = new javax.swing.JCheckBox();
        lechon = new javax.swing.JCheckBox();
        warnLechon = new javax.swing.JLabel();
        lechonQuan = new javax.swing.JTextField();
        bihon = new javax.swing.JCheckBox();
        warnBihon = new javax.swing.JLabel();
        bihonQuan = new javax.swing.JTextField();
        steak = new javax.swing.JCheckBox();
        warnBeaf = new javax.swing.JLabel();
        beafQuan = new javax.swing.JTextField();
        paklay = new javax.swing.JCheckBox();
        humba = new javax.swing.JCheckBox();
        sweet = new javax.swing.JCheckBox();
        warnPak = new javax.swing.JLabel();
        pakQuan = new javax.swing.JTextField();
        warnHumba = new javax.swing.JLabel();
        humbaQuan = new javax.swing.JTextField();
        warnFish = new javax.swing.JLabel();
        fishQuan = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        chair = new javax.swing.JCheckBox();
        quanC = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        tent = new javax.swing.JCheckBox();
        quanTnt = new javax.swing.JTextField();
        table = new javax.swing.JCheckBox();
        quanT = new javax.swing.JTextField();
        warnC = new javax.swing.JLabel();
        warnT = new javax.swing.JLabel();
        warnTnt = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        review = new javax.swing.JButton();
        reserve = new javax.swing.JButton();
        reserve1 = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        date = new org.jdesktop.swingx.JXDatePicker();
        jLabel5 = new javax.swing.JLabel();
        wed = new javax.swing.JRadioButton();
        bday = new javax.swing.JRadioButton();

        setTitle("RESERVATION FORM");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icon logo.png"))); // NOI18N
        setMaximumSize(new java.awt.Dimension(1325, 635));
        setMinimumSize(new java.awt.Dimension(1325, 635));
        setPreferredSize(new java.awt.Dimension(1325, 635));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 158, 51));
        jPanel1.setMaximumSize(new java.awt.Dimension(1325, 635));
        jPanel1.setMinimumSize(new java.awt.Dimension(1350, 620));
        jPanel1.setPreferredSize(new java.awt.Dimension(1325, 620));
        jPanel1.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));
        jPanel2.setLayout(null);
        jPanel2.add(jLabel9);
        jLabel9.setBounds(221, 129, 0, 0);

        jLabel16.setBackground(new java.awt.Color(255, 255, 102));
        jLabel16.setFont(new java.awt.Font("Showcard Gothic", 2, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(51, 51, 51));
        jLabel16.setText("DESSERTS");
        jPanel2.add(jLabel16);
        jLabel16.setBounds(0, 0, 580, 23);

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/float.jpg"))); // NOI18N
        jPanel2.add(jLabel17);
        jLabel17.setBounds(20, 30, 94, 67);

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/buko.jpg"))); // NOI18N
        jPanel2.add(jLabel19);
        jLabel19.setBounds(440, 20, 94, 76);

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/mac.jpg"))); // NOI18N
        jPanel2.add(jLabel21);
        jLabel21.setBounds(160, 40, 90, 60);

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/tap.jpg"))); // NOI18N
        jPanel2.add(jLabel23);
        jLabel23.setBounds(300, 20, 94, 76);

        mac.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        mac.setForeground(new java.awt.Color(255, 255, 255));
        mac.setText("P800 - Macaroni Salad");
        jPanel2.add(mac);
        mac.setBounds(143, 104, 137, 24);

        mango.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        mango.setForeground(new java.awt.Color(255, 255, 255));
        mango.setText("P800 - Mango Float ");
        jPanel2.add(mango);
        mango.setBounds(0, 104, 126, 24);

        buko.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        buko.setForeground(new java.awt.Color(255, 255, 255));
        buko.setText("P800 - Buko Salad");
        buko.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bukoActionPerformed(evt);
            }
        });
        jPanel2.add(buko);
        buko.setBounds(433, 104, 114, 24);

        tap.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        tap.setForeground(new java.awt.Color(255, 255, 255));
        tap.setText("P800 - Tapioca Salad");
        tap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tapActionPerformed(evt);
            }
        });
        jPanel2.add(tap);
        tap.setBounds(290, 104, 129, 24);

        jPanel10.setBackground(new java.awt.Color(153, 153, 153));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 580, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel10);
        jPanel10.setBounds(0, 0, 580, 20);

        jPanel14.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 580, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel14);
        jPanel14.setBounds(0, 100, 580, 30);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(750, 30, 580, 140);

        jPanel3.setBackground(new java.awt.Color(0, 255, 102));
        jPanel3.setLayout(null);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/dugo.jpg"))); // NOI18N
        jPanel3.add(jLabel2);
        jLabel2.setBounds(10, 60, 107, 60);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/lechon.jpg"))); // NOI18N
        jPanel3.add(jLabel8);
        jLabel8.setBounds(10, 130, 94, 67);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/bihon.jpg"))); // NOI18N
        jPanel3.add(jLabel4);
        jLabel4.setBounds(10, 210, 94, 63);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/steak.jpg"))); // NOI18N
        jPanel3.add(jLabel3);
        jLabel3.setBounds(10, 280, 107, 60);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/pak.jpg"))); // NOI18N
        jPanel3.add(jLabel11);
        jLabel11.setBounds(10, 350, 94, 62);

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/humba.jpg"))); // NOI18N
        jPanel3.add(jLabel13);
        jLabel13.setBounds(10, 420, 132, 60);

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/eska.jpg"))); // NOI18N
        jPanel3.add(jLabel10);
        jLabel10.setBounds(10, 490, 94, 71);

        jPanel6.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Showcard Gothic", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("WELCOME");

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(51, 51, 51));
        jTextField1.setFont(new java.awt.Font("Showcard Gothic", 1, 24)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setText("asd");
        jTextField1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 322, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel6);
        jPanel6.setBounds(0, 0, 740, 30);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel3.add(jSeparator1);
        jSeparator1.setBounds(350, 40, 2, 520);

        jLabel14.setBackground(new java.awt.Color(51, 51, 51));
        jLabel14.setFont(new java.awt.Font("Showcard Gothic", 2, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(204, 204, 204));
        jLabel14.setText("By Pieces");
        jPanel3.add(jLabel14);
        jLabel14.setBounds(360, 40, 380, 20);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/lumpia.jpg"))); // NOI18N
        jPanel3.add(jLabel12);
        jLabel12.setBounds(370, 70, 94, 74);

        lumpia.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        lumpia.setText("P10 - Lumpia");
        lumpia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lumpiaActionPerformed(evt);
            }
        });
        jPanel3.add(lumpia);
        lumpia.setBounds(500, 80, 120, 24);

        lump.setEditable(false);
        lump.setEnabled(false);
        lump.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lumpActionPerformed(evt);
            }
        });
        lump.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lumpKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lumpKeyTyped(evt);
            }
        });
        jPanel3.add(lump);
        lump.setBounds(630, 80, 57, 24);

        warnLumpia.setBackground(new java.awt.Color(255, 255, 0));
        warnLumpia.setForeground(java.awt.Color.red);
        warnLumpia.setText("invalid");
        jPanel3.add(warnLumpia);
        warnLumpia.setBounds(630, 110, 50, 15);

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/fried.jpg"))); // NOI18N
        jPanel3.add(jLabel15);
        jLabel15.setBounds(370, 170, 94, 118);

        fried.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        fried.setText("P15 - Fried Chicken");
        fried.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                friedActionPerformed(evt);
            }
        });
        jPanel3.add(fried);
        fried.setBounds(500, 190, 121, 24);

        fry.setEditable(false);
        fry.setEnabled(false);
        fry.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fryKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fryKeyTyped(evt);
            }
        });
        jPanel3.add(fry);
        fry.setBounds(630, 190, 57, 24);

        warnFried.setForeground(java.awt.Color.red);
        warnFried.setText("invalid");
        jPanel3.add(warnFried);
        warnFried.setBounds(630, 220, 60, 15);

        jPanel7.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel7);
        jPanel7.setBounds(360, 40, 380, 20);

        jPanel8.setBackground(new java.awt.Color(0, 153, 153));
        jPanel8.setLayout(null);

        jLabel18.setFont(new java.awt.Font("Showcard Gothic", 2, 18)); // NOI18N
        jLabel18.setText("DRINKS");
        jPanel8.add(jLabel18);
        jLabel18.setBounds(10, 10, 350, 23);

        jPanel9.setBackground(new java.awt.Color(0, 51, 51));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jPanel8.add(jPanel9);
        jPanel9.setBounds(10, 10, 350, 20);

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/botelya.jpg"))); // NOI18N
        jPanel8.add(jLabel22);
        jLabel22.setBounds(20, 40, 91, 60);

        glass.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        glass.setText("P210 in dozen Softdrinks in glass bottle");
        glass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                glassActionPerformed(evt);
            }
        });
        jPanel8.add(glass);
        glass.setBounds(130, 40, 225, 24);

        quanG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quanGActionPerformed(evt);
            }
        });
        jPanel8.add(quanG);
        quanG.setBounds(150, 70, 34, 20);

        warnG.setForeground(java.awt.Color.red);
        warnG.setText("invalid");
        jPanel8.add(warnG);
        warnG.setBounds(190, 70, 30, 15);

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/plastic.jpg"))); // NOI18N
        jPanel8.add(jLabel20);
        jLabel20.setBounds(20, 120, 80, 106);

        plas.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        plas.setText("P225 in dozen Softdrinks in plastic bottle");
        plas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plasActionPerformed(evt);
            }
        });
        jPanel8.add(plas);
        plas.setBounds(130, 150, 225, 24);
        jPanel8.add(quanP);
        quanP.setBounds(150, 180, 35, 20);

        warnP.setForeground(java.awt.Color.red);
        warnP.setText("invalid");
        jPanel8.add(warnP);
        warnP.setBounds(190, 180, 30, 15);

        jPanel3.add(jPanel8);
        jPanel8.setBounds(360, 310, 370, 250);

        jPanel13.setBackground(new java.awt.Color(51, 51, 51));
        jPanel13.setLayout(null);

        dugoQuan.setEditable(false);
        dugoQuan.setBackground(new java.awt.Color(255, 255, 255));
        dugoQuan.setEnabled(false);
        dugoQuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dugoQuanActionPerformed(evt);
            }
        });
        dugoQuan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dugoQuanKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dugoQuanKeyTyped(evt);
            }
        });
        jPanel13.add(dugoQuan);
        dugoQuan.setBounds(30, 30, 57, 24);

        warnDugo.setBackground(new java.awt.Color(255, 255, 0));
        warnDugo.setForeground(java.awt.Color.red);
        warnDugo.setText("invalid");
        jPanel13.add(warnDugo);
        warnDugo.setBounds(90, 30, 80, 20);

        dugo.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        dugo.setForeground(new java.awt.Color(255, 255, 255));
        dugo.setText("P300 - Dugo - dugo");
        dugo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dugoActionPerformed(evt);
            }
        });
        jPanel13.add(dugo);
        dugo.setBounds(10, 10, 160, 24);

        lechon.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        lechon.setForeground(new java.awt.Color(255, 255, 255));
        lechon.setText("P1500 - Lechon");
        lechon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lechonActionPerformed(evt);
            }
        });
        jPanel13.add(lechon);
        lechon.setBounds(10, 70, 160, 24);

        warnLechon.setBackground(new java.awt.Color(255, 255, 0));
        warnLechon.setForeground(java.awt.Color.red);
        warnLechon.setText("invalid");
        jPanel13.add(warnLechon);
        warnLechon.setBounds(90, 100, 80, 20);

        lechonQuan.setEditable(false);
        lechonQuan.setBackground(new java.awt.Color(255, 255, 255));
        lechonQuan.setEnabled(false);
        lechonQuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lechonQuanActionPerformed(evt);
            }
        });
        lechonQuan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lechonQuanKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lechonQuanKeyTyped(evt);
            }
        });
        jPanel13.add(lechonQuan);
        lechonQuan.setBounds(30, 100, 57, 24);

        bihon.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        bihon.setForeground(new java.awt.Color(255, 255, 255));
        bihon.setText("P300 - Pansit Bihon");
        bihon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bihonActionPerformed(evt);
            }
        });
        jPanel13.add(bihon);
        bihon.setBounds(10, 150, 160, 24);

        warnBihon.setBackground(new java.awt.Color(255, 255, 0));
        warnBihon.setForeground(java.awt.Color.red);
        warnBihon.setText("invalid");
        jPanel13.add(warnBihon);
        warnBihon.setBounds(90, 180, 80, 20);

        bihonQuan.setEditable(false);
        bihonQuan.setBackground(new java.awt.Color(255, 255, 255));
        bihonQuan.setEnabled(false);
        bihonQuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bihonQuanActionPerformed(evt);
            }
        });
        bihonQuan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bihonQuanKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                bihonQuanKeyTyped(evt);
            }
        });
        jPanel13.add(bihonQuan);
        bihonQuan.setBounds(30, 180, 57, 24);

        steak.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        steak.setForeground(new java.awt.Color(255, 255, 255));
        steak.setText("P450 - Beaf Steak");
        steak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                steakActionPerformed(evt);
            }
        });
        jPanel13.add(steak);
        steak.setBounds(10, 220, 160, 24);

        warnBeaf.setBackground(new java.awt.Color(255, 255, 0));
        warnBeaf.setForeground(java.awt.Color.red);
        warnBeaf.setText("invalid");
        jPanel13.add(warnBeaf);
        warnBeaf.setBounds(90, 250, 80, 20);

        beafQuan.setEditable(false);
        beafQuan.setBackground(new java.awt.Color(255, 255, 255));
        beafQuan.setEnabled(false);
        beafQuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beafQuanActionPerformed(evt);
            }
        });
        beafQuan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                beafQuanKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                beafQuanKeyTyped(evt);
            }
        });
        jPanel13.add(beafQuan);
        beafQuan.setBounds(30, 250, 57, 24);

        paklay.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        paklay.setForeground(new java.awt.Color(255, 255, 255));
        paklay.setText("P450 - Paklay");
        paklay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paklayActionPerformed(evt);
            }
        });
        jPanel13.add(paklay);
        paklay.setBounds(10, 290, 160, 24);

        humba.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        humba.setForeground(new java.awt.Color(255, 255, 255));
        humba.setText("P500 - Humba");
        humba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                humbaActionPerformed(evt);
            }
        });
        jPanel13.add(humba);
        humba.setBounds(10, 360, 160, 24);

        sweet.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        sweet.setForeground(new java.awt.Color(255, 255, 255));
        sweet.setText("P450 - Sweet and Sour Fish");
        sweet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sweetActionPerformed(evt);
            }
        });
        jPanel13.add(sweet);
        sweet.setBounds(10, 430, 160, 24);

        warnPak.setBackground(new java.awt.Color(255, 255, 0));
        warnPak.setForeground(java.awt.Color.red);
        warnPak.setText("invalid");
        jPanel13.add(warnPak);
        warnPak.setBounds(90, 320, 80, 20);

        pakQuan.setEditable(false);
        pakQuan.setBackground(new java.awt.Color(255, 255, 255));
        pakQuan.setEnabled(false);
        pakQuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pakQuanActionPerformed(evt);
            }
        });
        pakQuan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pakQuanKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pakQuanKeyTyped(evt);
            }
        });
        jPanel13.add(pakQuan);
        pakQuan.setBounds(30, 320, 57, 24);

        warnHumba.setBackground(new java.awt.Color(255, 255, 0));
        warnHumba.setForeground(java.awt.Color.red);
        warnHumba.setText("invalid");
        jPanel13.add(warnHumba);
        warnHumba.setBounds(90, 390, 80, 20);

        humbaQuan.setEditable(false);
        humbaQuan.setBackground(new java.awt.Color(255, 255, 255));
        humbaQuan.setEnabled(false);
        humbaQuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                humbaQuanActionPerformed(evt);
            }
        });
        humbaQuan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                humbaQuanKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                humbaQuanKeyTyped(evt);
            }
        });
        jPanel13.add(humbaQuan);
        humbaQuan.setBounds(30, 390, 57, 24);

        warnFish.setBackground(new java.awt.Color(255, 255, 0));
        warnFish.setForeground(java.awt.Color.red);
        warnFish.setText("invalid");
        jPanel13.add(warnFish);
        warnFish.setBounds(90, 460, 80, 20);

        fishQuan.setEditable(false);
        fishQuan.setBackground(new java.awt.Color(255, 255, 255));
        fishQuan.setEnabled(false);
        fishQuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fishQuanActionPerformed(evt);
            }
        });
        fishQuan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fishQuanKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fishQuanKeyTyped(evt);
            }
        });
        jPanel13.add(fishQuan);
        fishQuan.setBounds(30, 460, 57, 24);

        jPanel3.add(jPanel13);
        jPanel13.setBounds(160, 60, 180, 500);

        jPanel1.add(jPanel3);
        jPanel3.setBounds(10, 30, 740, 580);

        jPanel4.setBackground(new java.awt.Color(204, 204, 255));
        jPanel4.setLayout(null);

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/chair.jpg"))); // NOI18N
        jPanel4.add(jLabel24);
        jLabel24.setBounds(12, 41, 94, 94);

        jLabel25.setFont(new java.awt.Font("Showcard Gothic", 2, 18)); // NOI18N
        jLabel25.setText("MATERIALS");
        jPanel4.add(jLabel25);
        jLabel25.setBounds(0, 0, 580, 23);

        chair.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        chair.setText("P15 per Chair");
        chair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chairActionPerformed(evt);
            }
        });
        jPanel4.add(chair);
        chair.setBounds(12, 138, 92, 24);

        quanC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                quanCKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                quanCKeyTyped(evt);
            }
        });
        jPanel4.add(quanC);
        quanC.setBounds(10, 170, 50, 19);

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/tent.jpg"))); // NOI18N
        jPanel4.add(jLabel26);
        jLabel26.setBounds(430, 70, 94, 68);

        jLabel28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/table.jpg"))); // NOI18N
        jPanel4.add(jLabel28);
        jLabel28.setBounds(240, 40, 94, 94);

        tent.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        tent.setText("P500 - Tent");
        tent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tentActionPerformed(evt);
            }
        });
        jPanel4.add(tent);
        tent.setBounds(430, 140, 83, 24);

        quanTnt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                quanTntKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                quanTntKeyTyped(evt);
            }
        });
        jPanel4.add(quanTnt);
        quanTnt.setBounds(430, 170, 50, 19);

        table.setFont(new java.awt.Font("Segoe UI Light", 2, 12)); // NOI18N
        table.setText("P150 per Table");
        table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableActionPerformed(evt);
            }
        });
        jPanel4.add(table);
        table.setBounds(240, 140, 98, 24);

        quanT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                quanTKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                quanTKeyTyped(evt);
            }
        });
        jPanel4.add(quanT);
        quanT.setBounds(240, 170, 50, 19);

        warnC.setForeground(java.awt.Color.red);
        warnC.setText("invalid");
        jPanel4.add(warnC);
        warnC.setBounds(70, 170, 30, 15);

        warnT.setForeground(java.awt.Color.red);
        warnT.setText("invalid");
        jPanel4.add(warnT);
        warnT.setBounds(300, 170, 30, 15);

        warnTnt.setForeground(java.awt.Color.red);
        warnTnt.setText("invalid");
        jPanel4.add(warnTnt);
        warnTnt.setBounds(490, 170, 30, 15);

        jPanel11.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 580, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jPanel4.add(jPanel11);
        jPanel11.setBounds(0, 0, 580, 20);

        jPanel1.add(jPanel4);
        jPanel4.setBounds(750, 170, 580, 200);

        jPanel12.setBackground(new java.awt.Color(102, 102, 255));
        jPanel12.setLayout(null);

        jPanel5.setBackground(new java.awt.Color(153, 0, 153));
        jPanel5.setLayout(null);

        review.setBackground(new java.awt.Color(204, 153, 0));
        review.setText("REVIEW ORDER");
        review.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        review.setBorderPainted(false);
        review.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviewActionPerformed(evt);
            }
        });
        jPanel5.add(review);
        review.setBounds(10, 10, 396, 41);

        reserve.setBackground(new java.awt.Color(0, 102, 102));
        reserve.setText("CANCEL");
        reserve.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        reserve.setBorderPainted(false);
        jPanel5.add(reserve);
        reserve.setBounds(10, 110, 396, 38);

        reserve1.setBackground(new java.awt.Color(0, 153, 51));
        reserve1.setText("RESERVE");
        reserve1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        reserve1.setBorderPainted(false);
        reserve1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserve1ActionPerformed(evt);
            }
        });
        jPanel5.add(reserve1);
        reserve1.setBounds(10, 60, 396, 38);

        jPanel12.add(jPanel5);
        jPanel5.setBounds(70, 60, 420, 160);

        jPanel15.setBackground(new java.awt.Color(102, 102, 102));
        jPanel15.setLayout(null);

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel7.setText("Date of the Event");
        jPanel15.add(jLabel7);
        jLabel7.setBounds(270, 10, 110, 16);

        date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateActionPerformed(evt);
            }
        });
        jPanel15.add(date);
        date.setBounds(300, 30, 151, 23);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel5.setText("Event");
        jPanel15.add(jLabel5);
        jLabel5.setBounds(20, 10, 60, 19);

        event.add(wed);
        wed.setText("Wedding");
        wed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wedActionPerformed(evt);
            }
        });
        jPanel15.add(wed);
        wed.setBounds(50, 30, 80, 23);

        event.add(bday);
        bday.setText("Birthday");
        jPanel15.add(bday);
        bday.setBounds(140, 30, 80, 23);

        jPanel12.add(jPanel15);
        jPanel15.setBounds(0, 0, 580, 60);

        jPanel1.add(jPanel12);
        jPanel12.setBounds(750, 370, 580, 240);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(-10, -30, 1370, 630);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lechonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lechonActionPerformed
        if(lechon.isSelected())
        {
           lechonQuan.setEnabled(true);
           lechonQuan.setEditable(true);
           
           if(lechonQuan.getText().isEmpty())
           {
               warnLechon.setVisible(true);
           }
        }
        else
        {
           lechonQuan.setEnabled(false);
           lechonQuan.setEditable(false);
           lechonQuan.setText("");
           warnLechon.setVisible(false);
        }
    }//GEN-LAST:event_lechonActionPerformed

    private void tapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tapActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tapActionPerformed

    private void bukoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bukoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bukoActionPerformed

    private void humbaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_humbaActionPerformed
        if(humba.isSelected())
        {
           humbaQuan.setEnabled(true);
           humbaQuan.setEditable(true);
           
           if(humbaQuan.getText().isEmpty())
           {
               warnHumba.setVisible(true);
           }
        }
        else
        {
           humbaQuan.setEnabled(false);
           humbaQuan.setEditable(false);
           humbaQuan.setText("");
           warnHumba.setVisible(false);
        }
    }//GEN-LAST:event_humbaActionPerformed

    private void lumpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lumpActionPerformed
        
    }//GEN-LAST:event_lumpActionPerformed

    private void lumpiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lumpiaActionPerformed
        if(lumpia.isSelected())
        {
           lump.setEnabled(true);
           lump.setEditable(true);
           
           if(lump.getText().isEmpty())
           {
               warnLumpia.setVisible(true);
           }
        }
        else
        {
           lump.setEnabled(false);
           lump.setEditable(false);
           lump.setText("");
           warnLumpia.setVisible(false);
        }
    }//GEN-LAST:event_lumpiaActionPerformed

    private void lumpKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lumpKeyTyped
        char lumpa = evt.getKeyChar();
        String Lump = lump.getText();
        if(!(Character.isDigit(lumpa)) || (lumpa == KeyEvent.VK_BACK_SPACE) || (lumpa == KeyEvent.VK_DELETE))
                {
                    evt.consume();
                }
        if(Lump.isEmpty())
        {
            warnLumpia.setVisible(true);
        }
        else if(Lump.length()>0)
        {
            warnLumpia.setVisible(false);
        }
        
    }//GEN-LAST:event_lumpKeyTyped

    private void fryKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fryKeyTyped
        char frie = evt.getKeyChar();
        if(!(Character.isDigit(frie)) || (frie == KeyEvent.VK_BACK_SPACE) || (frie == KeyEvent.VK_DELETE))
                {
                    evt.consume();
                }
    }//GEN-LAST:event_fryKeyTyped

    private void friedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_friedActionPerformed
        if(fried.isSelected())
        {
           fry.setEnabled(true);
           fry.setEditable(true);
           
           if(fry.getText().isEmpty())
           {
               warnFried.setVisible(true);
           }
        }
        else
        {
           fry.setEnabled(false);
           fry.setEditable(false);
           fry.setText("");
           warnFried.setVisible(false);
        }
    }//GEN-LAST:event_friedActionPerformed

    private void plasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plasActionPerformed
        if(plas.isSelected())
        {
           quanP.setEnabled(true);
           quanP.setEditable(true);
           
           if(quanP.getText().isEmpty())
           {
               warnP.setVisible(true);
           }
        }
        else
        {
           quanP.setEnabled(false);
           quanP.setEditable(false);
           quanP.setText("");
           warnP.setVisible(false);
        }
    }//GEN-LAST:event_plasActionPerformed

    private void glassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_glassActionPerformed
        if(glass.isSelected())
        {
           quanG.setEnabled(true);
           quanG.setEditable(true);
           
           if(quanG.getText().isEmpty())
           {
               warnG.setVisible(true);
           }
        }
        else
        {
           quanG.setEnabled(false);
           quanG.setEditable(false);
           quanG.setText("");
           warnG.setVisible(false);
        }
    }//GEN-LAST:event_glassActionPerformed

    private void chairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chairActionPerformed
        if(chair.isSelected())
        {
           quanC.setEnabled(true);
           quanC.setEditable(true);
           
           if(quanC.getText().isEmpty())
           {
               warnC.setVisible(true);
           }
        }
        else
        {
           quanC.setEnabled(false);
           quanC.setEditable(false);
           quanC.setText("");
           warnC.setVisible(false);
        }
    }//GEN-LAST:event_chairActionPerformed

    private void tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableActionPerformed
        if(table.isSelected())
        {
           quanT.setEnabled(true);
           quanT.setEditable(true);
           
           if(quanT.getText().isEmpty())
           {
               warnT.setVisible(true);
           }
        }
        else
        {
           quanT.setEnabled(false);
           quanT.setEditable(false);
           quanT.setText("");
           warnT.setVisible(false);
        }
    }//GEN-LAST:event_tableActionPerformed

    private void tentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tentActionPerformed
        if(tent.isSelected())
        {
           quanTnt.setEnabled(true);
           quanTnt.setEditable(true);
           
           if(quanTnt.getText().isEmpty())
           {
               warnTnt.setVisible(true);
           }
        }
        else
        {
           quanTnt.setEnabled(false);
           quanTnt.setEditable(false);
           quanTnt.setText("");
           warnTnt.setVisible(false);
        }
    }//GEN-LAST:event_tentActionPerformed

    private void lumpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lumpKeyPressed
        int i = lump.getText().length();
        char c = evt.getKeyChar();
        
        
           
                if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
                {
                    lump.setEditable(true);
                }
                else if(i>5)
                {
                    lump.setEditable(false);
                }
    }//GEN-LAST:event_lumpKeyPressed

    private void dugoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dugoActionPerformed
        if(dugo.isSelected())
        {
           dugoQuan.setEnabled(true);
           dugoQuan.setEditable(true);
           
           if(dugoQuan.getText().isEmpty())
           {
               warnDugo.setVisible(true);
           }
        }
        else
        {
           dugoQuan.setEnabled(false);
           dugoQuan.setEditable(false);
           dugoQuan.setText("");
           warnDugo.setVisible(false);
        }
    }//GEN-LAST:event_dugoActionPerformed

    private void bihonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bihonActionPerformed
        if(bihon.isSelected())
        {
           bihonQuan.setEnabled(true);
           bihonQuan.setEditable(true);
           
           if(bihonQuan.getText().isEmpty())
           {
               warnBihon.setVisible(true);
           }
        }
        else
        {
           bihonQuan.setEnabled(false);
           bihonQuan.setEditable(false);
           bihonQuan.setText("");
           warnBihon.setVisible(false);
        }
    }//GEN-LAST:event_bihonActionPerformed

    private void steakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_steakActionPerformed
        if(steak.isSelected())
        {
           beafQuan.setEnabled(true);
           beafQuan.setEditable(true);
           
           if(beafQuan.getText().isEmpty())
           {
               warnBeaf.setVisible(true);
           }
        }
        else
        {
           beafQuan.setEnabled(false);
           beafQuan.setEditable(false);
           beafQuan.setText("");
           warnBeaf.setVisible(false);
        }
    }//GEN-LAST:event_steakActionPerformed

    private void sweetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sweetActionPerformed
        if(sweet.isSelected())
        {
           fishQuan.setEnabled(true);
           fishQuan.setEditable(true);
           
           if(fishQuan.getText().isEmpty())
           {
               warnFish.setVisible(true);
           }
        }
        else
        {
           fishQuan.setEnabled(false);
           fishQuan.setEditable(false);
           fishQuan.setText("");
           warnFish.setVisible(false);
        }
    }//GEN-LAST:event_sweetActionPerformed

    private void quanGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quanGActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quanGActionPerformed

    private void dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateActionPerformed

    private void wedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wedActionPerformed

    private void reviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviewActionPerformed
        wed.setActionCommand("Wedding");
        bday.setActionCommand("Birthday");
        
        int price_dugo = 300;
        int price_menudo = 300;
        int price_lechon = 1500;
        int price_sweet = 450;
        int price_humba = 500;
        int price_bihon = 300;
        int price_paklay = 450;
        int price_steak = 450;
        int price_lumpia = 10;
        int price_fried = 15;
        int price_mac = 800;
        int price_buko = 800;
        int price_tap = 800;
        int price_mango = 800;
        int price_glass = 210;
        int price_plas = 225;
        int price_tent = 500;
        int price_chair = 15;
        int price_table = 150;

        int total_piece = 0;
        int total_piece1 = 0;
        int total_piece2 = 0;
        int total_piece3 = 0;
        int total_piece4 = 0;
        int total_piece5 = 0;
        int total_piece6 = 0;

        String food = "";

        if(dugo.isSelected())
        {
            int QuanDugo = 0;

            if(dugoQuan.getText().length() > 0)
            {
                QuanDugo = Integer.parseInt(dugoQuan.getText());
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter quantity of orders for Dugo - dugo");
            }

            if(dugoQuan.getText().isEmpty() || (QuanDugo > 9999))
            {
                warnDugo.setVisible(true);
            }
            else
            {
                warnDugo.setVisible(false);
                total_piece = QuanDugo * price_dugo;
                food += dugo.getText() + "                                        " + QuanDugo +"                             " + "P" + total_piece;
        
            }
        }
        if(lechon.isSelected())
        {
            int QuanLechon = 0;

            if(lechonQuan.getText().length() > 0)
            {
                QuanLechon = Integer.parseInt(lechonQuan.getText());
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter quantity of orders for Lechon");
            }

            if(lechonQuan.getText().isEmpty() || (QuanLechon > 9999))
            {
                warnLechon.setVisible(true);
            }
            else
            {
                warnLechon.setVisible(false);
                total_piece = QuanLechon * price_lechon;
                food += "\n" + lechon.getText() + "                                      " + QuanLechon +"                                      " + "P" + total_piece;
            }
        }
        if(sweet.isSelected())
        {
            int QuanFish = 0;

            if(fishQuan.getText().length() > 0)
            {
                QuanFish = Integer.parseInt(fishQuan.getText());
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter quantity of orders for Sweet and Sour Fish");
            }

            if(fishQuan.getText().isEmpty() || (QuanFish > 9999))
            {
                warnFish.setVisible(true);
            }
            else
            {
                warnFish.setVisible(false);
                total_piece = QuanFish * price_sweet;
                food += "\n" + sweet.getText() + "                                  " + QuanFish +"                        " + "P" + total_piece;
            }
        }
        if(steak.isSelected())
        {
            int QuanBeaf = 0;

            if(beafQuan.getText().length() > 0)
            {
                QuanBeaf = Integer.parseInt(beafQuan.getText());
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter quantity of orders for Beaf steak");
            }

            if(beafQuan.getText().isEmpty() || (QuanBeaf > 9999))
            {
                warnBeaf.setVisible(true);
            }
            else
            {
                warnBeaf.setVisible(false);
                total_piece = QuanBeaf * price_steak;
                food += "\n" + steak.getText()+ "                                      " + QuanBeaf +"                                  " + "P" + total_piece;
            }
        }
        
        if(bihon.isSelected())
        {
            int QuanBihon = 0;

            if(bihonQuan.getText().length() > 0)
            {
                QuanBihon = Integer.parseInt(bihonQuan.getText());
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter quantity of orders for Pansit Bihon");
            }

            if(bihonQuan.getText().isEmpty() || (QuanBihon > 9999))
            {
                warnBihon.setVisible(true);
            }
            else
            {
                warnBihon.setVisible(false);
                total_piece = QuanBihon * price_bihon;
                food += "\n" + bihon.getText() + "                                 " + QuanBihon +"                                   " + "P" + total_piece;
            }
        }
        if(humba.isSelected())
        {
            int QuanHumba = 0;

            if(humbaQuan.getText().length() > 0)
            {
                QuanHumba = Integer.parseInt(humbaQuan.getText());
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter quantity of orders for Humba");
            }

            if(humbaQuan.getText().isEmpty() || (QuanHumba > 9999))
            {
                warnHumba.setVisible(true);
            }
            else
            {
                warnHumba.setVisible(false);
                total_piece = QuanHumba * price_humba;
                food += "\n" + humba.getText() + "                                " + QuanHumba +"                                             " + "P" + total_piece;
            }
        }
        if(paklay.isSelected())
        {
            int QuanPak = 0;

            if(pakQuan.getText().length() > 0)
            {
                QuanPak = Integer.parseInt(pakQuan.getText());
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter quantity of orders for Paklay");
            }

            if(pakQuan.getText().isEmpty() || (QuanPak > 9999))
            {
                warnPak.setVisible(true);
            }
            else
            {
                warnPak.setVisible(false);
                total_piece = QuanPak * price_paklay;
                food += "\n" + paklay.getText() + "                                   " + QuanPak +"                                            " + "P" + total_piece;
            }
        }

        String quan_lumpia = lump.getText();

        if(lumpia.isSelected())
        {
            int QuanLumpia = 0;
            String lum = lump.getText();

            if(quan_lumpia.length() > 0)
            {
                QuanLumpia = Integer.parseInt(quan_lumpia);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter quantity of lumpia");
            }

            if(lum.isEmpty() || (QuanLumpia > 9999))
            {
                warnLumpia.setVisible(true);
            }
            else
            {
                warnLumpia.setVisible(false);
                total_piece = QuanLumpia * price_lumpia;
                food += "\n" + lumpia.getText() + "                                 " + QuanLumpia +"                                    " + "P"+ total_piece;
            }
        }

        String quan_fried = fry.getText();
        if(fried.isSelected())
        {
            int QuanFried = 0;
            String fryed = fry.getText();

            if(quan_fried.length() > 0)
            {
                QuanFried = Integer.parseInt(quan_fried);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter quantity of Fried Chicken");
            }
            if(fryed.isEmpty() || QuanFried > 9999)
            {
                warnFried.setVisible(true);
            }
            else
            {
                warnLumpia.setVisible(false);
                total_piece = QuanFried * price_fried;
                food += "\n" + fried.getText() + "                      " + QuanFried +"                                    " + "P" + total_piece;
            }
        }

        //Desserts
        if(mac.isSelected())
        {
            food += "\n" + mac.getText() + "                                                                               " + "P" + price_mac;
        }
        if(buko.isSelected())
        {
            food += "\n" + buko.getText() + "                                                                               " + "P" + price_buko;
        }
        if(tap.isSelected())
        {
            food += "\n" + tap.getText() + "                                                                               " + "P" + price_tap;
        }
        if(mango.isSelected())
        {
            food += "\n" + mango.getText() + "                                                                               " + "P" + price_mango;
        }

        //Drinks

        String quan_plas = plas.getText();
        if(plas.isSelected())
        {
            int QuanPlas = 0;
            String plast = plas.getText();

            if(quan_plas.length() > 0)
            {
                QuanPlas = Integer.parseInt(quan_plas);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter quantity of Softdrinks in a plastic");
            }
            if(plast.isEmpty() || QuanPlas > 9999)
            {
                warnP.setVisible(true);
            }
            else
            {
                warnP.setVisible(false);
                total_piece = QuanPlas * price_plas;
                food += "\n" + plas.getText() + "                      " + QuanPlas +"                                    " + "P" + total_piece;
            }
        }

        if(glass.isSelected())
        {
            int QuanGlass = 0;
            String Glass = quanG.getText();

            if(quanG.getText().length() > 0)
            {
                QuanGlass = Integer.parseInt(Glass);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter quantity of Softdrinks in glass bottle");
            }
            if(Glass.isEmpty() || QuanGlass > 9999)
            {
                warnG.setVisible(true);
            }
            else
            {
                warnG.setVisible(false);
                total_piece = QuanGlass * price_glass;
                food += "\n" + glass.getText() + "                                 " + QuanGlass +"                                               " + "P" + price_glass;
            }
        }

        //Materials
        if(tent.isSelected())
        {
            int QuanTnt = 0;
            String Tnt = quanTnt.getText();

            if(quanTnt.getText().length() > 0)
            {
                QuanTnt = Integer.parseInt(Tnt);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter quantity of tent");
            }
            if(Tnt.isEmpty() || QuanTnt > 9999)
            {
                warnTnt.setVisible(true);
            }
            else
            {
                warnTnt.setVisible(false);
                total_piece = QuanTnt * price_tent;
                food += "\n" + tent.getText() + "                           " + QuanTnt + "                                                " + "P" + total_piece;
            }
        }
        if(chair.isSelected())
        {
            int QuanChair = 0;
            String Chair = quanC.getText();

            if(quanC.getText().length() > 0)
            {
                QuanChair = Integer.parseInt(Chair);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter quantity of chairs");
            }
            if(Chair.isEmpty() || QuanChair > 9999)
            {
                warnC.setVisible(true);
            }
            else
            {
                warnC.setVisible(false);
                total_piece = QuanChair * price_chair;
                food += "\n" + chair.getText() + "                                        " + QuanChair + "                                        " + "P" + total_piece;
            }
        }
        if(table.isSelected())
        {
            int QuanTable = 0;
            String tab = quanT.getText();

            if(quanT.getText().length() > 0)
            {
                QuanTable = Integer.parseInt(tab);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter quantity of tables");
            }
            if(tab.isEmpty() || QuanTable > 9999)
            {
                warnFried.setVisible(true);
            }
            else
            {
                warnLumpia.setVisible(false);
                total_piece = QuanTable * price_table;
                food += "\n" + table.getText() + "                                             " + QuanTable + "                                   " + "P" + total_piece;
            }
        }
        
        
        if((!dugo.isSelected() && dugoQuan.getText().isEmpty() && warnDugo.isVisible()) 
            && (!lechon.isSelected() && lechonQuan.getText().isEmpty() && warnLechon.isVisible())
            && (!sweet.isSelected() && fishQuan.getText().isEmpty() && warnFish.isVisible())
            && (!paklay.isSelected() && pakQuan.getText().isEmpty() && warnPak.isVisible())
            && (!humba.isSelected() && humbaQuan.getText().isEmpty() && warnHumba.isVisible())
            && (!steak.isSelected() && beafQuan.getText().isEmpty() && warnBeaf.isVisible())
            && (!lumpia.isSelected() &&lump.getText().isEmpty() && warnLumpia.isVisible())
            && (!plas.isSelected() && quanP.getText().isEmpty() && warnP.isVisible())
            && (!glass.isSelected() && quanG.getText().isEmpty() && warnG.isVisible())
            && (!mango.isSelected())
            && (!tap.isSelected())
            && (!mac.isSelected())
            && (!buko.isSelected())
            && (!chair.isSelected() && quanC.getText().isEmpty() && warnC.isVisible())
            && (!tent.isSelected() && quanTnt.getText().isEmpty() && warnTnt.isVisible())
            && (!table.isSelected()&& quanT.getText().isEmpty() && warnT.isVisible()))
        {
            JOptionPane.showMessageDialog(this,"Please selected order");
        }
        /*if((!warnFish.isVisible() && fishQuan.getText().isEmpty()) || (!warnPak.isVisible() && pakQuan.getText().isEmpty() ) || (!warnHumba.isVisible() && pakQuan.getText().isEmpty()) || (!warnLechon.isVisible() && pakQuan.getText().isEmpty()) || (!warnBeaf.isVisible() && pakQuan.getText().isEmpty()) || (!warnBihon.isVisible() && pakQuan.getText().isEmpty()) || (!warnDugo.isVisible() && pakQuan.getText().isEmpty()) || (!warnPak.isVisible() && pakQuan.getText().isEmpty()) || (!warnLumpia.isVisible() && pakQuan.getText().isEmpty()) || (!warnFried.isVisible() && pakQuan.getText().isEmpty()) || (!warnP.isVisible() && pakQuan.getText().isEmpty()) || (!warnG.isVisible() && pakQuan.getText().isEmpty()) || (!warnC.isVisible() && pakQuan.getText().isEmpty()) || (!warnT.isVisible() && pakQuan.getText().isEmpty()) || (!warnTnt.isVisible() && pakQuan.getText().isEmpty()) )
        {
            JOptionPane.showMessageDialog(this, "You have chosen: \n" + food,"",JOptionPane.PLAIN_MESSAGE);
        }*/
        if((lumpia.isSelected() &&lump.getText().isEmpty() ==false && warnLumpia.isVisible() == false) 
                || (fried.isSelected() && fry.getText().isEmpty() == false && warnFried.isVisible() == false) 
                || (dugo.isSelected() && dugoQuan.getText().isEmpty() == false && warnDugo.isVisible() == false)
                || (lechon.isSelected() && lechonQuan.getText().isEmpty() == false && warnLechon.isVisible() == false)
                || (bihon.isSelected() && bihonQuan.getText().isEmpty() == false && warnBihon.isVisible() == false)
                || (steak.isSelected() && beafQuan.getText().isEmpty() == false && warnBeaf.isVisible() == false)
                || (paklay.isSelected() && pakQuan.getText().isEmpty() == false && warnPak.isVisible() == false)
                || (humba.isSelected() && humbaQuan.getText().isEmpty() == false && warnHumba.isVisible() == false)
                || (sweet.isSelected() && fishQuan.getText().isEmpty() == false && warnFish.isVisible() == false)
                || (glass.isSelected() && quanG.getText().isEmpty() == false && warnG.isVisible() == false)
                || (plas.isSelected() && quanP.getText().isEmpty() == false && warnP.isVisible() == false)
                || (chair.isSelected() && quanC.getText().isEmpty() == false && warnC.isVisible() == false)
                || (table.isSelected() && quanT.getText().isEmpty() == false && warnT.isVisible() == false)
                || (tent.isSelected() && quanTnt.getText().isEmpty() == false && warnTnt.isVisible() == false)
                || (mango.isSelected())
                || (mac.isSelected())
                || (tap.isSelected())
                || (buko.isSelected()))
        {
            JOptionPane.showMessageDialog(this, "You have chosen: \n" + food,"",JOptionPane.PLAIN_MESSAGE);
        }

    }//GEN-LAST:event_reviewActionPerformed

    private void dugoQuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dugoQuanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dugoQuanActionPerformed

    private void dugoQuanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dugoQuanKeyPressed
        int i = dugoQuan.getText().length();
        char c = evt.getKeyChar();
        
        
           
                if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
                {
                    dugoQuan.setEditable(true);
                }
                else if(i>1)
                {
                    dugoQuan.setEditable(false);
                }
    }//GEN-LAST:event_dugoQuanKeyPressed

    private void dugoQuanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dugoQuanKeyTyped
        char DugO = evt.getKeyChar();
        String dUgo = dugoQuan.getText();
        
        if(!(Character.isDigit(DugO)) || (DugO == KeyEvent.VK_BACK_SPACE) || (DugO == KeyEvent.VK_DELETE))
                {
                    evt.consume();
                }
        if(dUgo.isEmpty())
        {
            warnDugo.setVisible(true);
        }
        else if(dUgo.length()>0)
        {
            warnDugo.setVisible(false);
        }
    }//GEN-LAST:event_dugoQuanKeyTyped

    private void lechonQuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lechonQuanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lechonQuanActionPerformed

    private void lechonQuanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lechonQuanKeyPressed
        int i = lechonQuan.getText().length();
        char c = evt.getKeyChar();
        
        
           
                if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
                {
                    lechonQuan.setEditable(true);
                }
                else if(i>1)
                {
                    lechonQuan.setEditable(false);
                }
    }//GEN-LAST:event_lechonQuanKeyPressed

    private void lechonQuanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lechonQuanKeyTyped
        char LechOn = evt.getKeyChar();
        String lecHon = lechonQuan.getText();
        
        if(!(Character.isDigit(LechOn)) || (LechOn == KeyEvent.VK_BACK_SPACE) || (LechOn == KeyEvent.VK_DELETE))
                {
                    evt.consume();
                }
        if(lecHon.isEmpty())
        {
            warnLechon.setVisible(true);
        }
        else if(lecHon.length()>0)
        {
            warnLechon.setVisible(false);
        }
    }//GEN-LAST:event_lechonQuanKeyTyped

    private void bihonQuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bihonQuanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bihonQuanActionPerformed

    private void bihonQuanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bihonQuanKeyPressed
        int i = bihonQuan.getText().length();
        char c = evt.getKeyChar();
        
        
           
                if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
                {
                    bihonQuan.setEditable(true);
                }
                else if(i>2)
                {
                    bihonQuan.setEditable(false);
                }
    }//GEN-LAST:event_bihonQuanKeyPressed

    private void bihonQuanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bihonQuanKeyTyped
        char PanBihon = evt.getKeyChar();
        String Bihon = bihonQuan.getText();
        if(!(Character.isDigit(PanBihon)) || (PanBihon == KeyEvent.VK_BACK_SPACE) || (PanBihon == KeyEvent.VK_DELETE))
                {
                    evt.consume();
                }
        if(Bihon.isEmpty())
        {
            warnBihon.setVisible(true);
        }
        else if(Bihon.length()>0)
        {
            warnBihon.setVisible(false);
        }
    }//GEN-LAST:event_bihonQuanKeyTyped

    private void beafQuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beafQuanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_beafQuanActionPerformed

    private void beafQuanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_beafQuanKeyPressed
        int i = beafQuan.getText().length();
        char c = evt.getKeyChar();
        
        
           
                if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
                {
                    beafQuan.setEditable(true);
                }
                else if(i>1)
                {
                    beafQuan.setEditable(false);
                }
    }//GEN-LAST:event_beafQuanKeyPressed

    private void beafQuanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_beafQuanKeyTyped
        char Beaf = evt.getKeyChar();
        String beaF = beafQuan.getText();
        if(!(Character.isDigit(Beaf)) || (Beaf == KeyEvent.VK_BACK_SPACE) || (Beaf == KeyEvent.VK_DELETE))
                {
                    evt.consume();
                }
        if(beaF.isEmpty())
        {
            warnBeaf.setVisible(true);
        }
        else if(beaF.length()>0)
        {
            warnBeaf.setVisible(false);
        }
    }//GEN-LAST:event_beafQuanKeyTyped

    private void pakQuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pakQuanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pakQuanActionPerformed

    private void pakQuanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pakQuanKeyPressed
        int i = pakQuan.getText().length();
        char c = evt.getKeyChar();
        
        
           
                if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
                {
                    pakQuan.setEditable(true);
                }
                else if(i>2)
                {
                    pakQuan.setEditable(false);
                }
    }//GEN-LAST:event_pakQuanKeyPressed

    private void pakQuanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pakQuanKeyTyped
        char Pak = evt.getKeyChar();
        String Paklay = pakQuan.getText();
        if(!(Character.isDigit(Pak)) || (Pak == KeyEvent.VK_BACK_SPACE) || (Pak == KeyEvent.VK_DELETE))
                {
                    evt.consume();
                }
        if(Paklay.isEmpty())
        {
            warnPak.setVisible(true);
        }
        else if(Paklay.length()>0)
        {
            warnPak.setVisible(false);
        }
    }//GEN-LAST:event_pakQuanKeyTyped

    private void humbaQuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_humbaQuanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_humbaQuanActionPerformed

    private void humbaQuanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_humbaQuanKeyPressed
        int i = humbaQuan.getText().length();
        char c = evt.getKeyChar();
        
        
           
                if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
                {
                    humbaQuan.setEditable(true);
                }
                else if(i>2)
                {
                    humbaQuan.setEditable(false);
                }
    }//GEN-LAST:event_humbaQuanKeyPressed

    private void humbaQuanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_humbaQuanKeyTyped
        char humBa = evt.getKeyChar();
        String humBA = humbaQuan.getText();
        if(!(Character.isDigit(humBa)) || (humBa == KeyEvent.VK_BACK_SPACE) || (humBa == KeyEvent.VK_DELETE))
                {
                    evt.consume();
                }
        if(humBA.isEmpty())
        {
            warnHumba.setVisible(true);
        }
        else if(humBA.length()>0)
        {
            warnHumba.setVisible(false);
        }
    }//GEN-LAST:event_humbaQuanKeyTyped

    private void fishQuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fishQuanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fishQuanActionPerformed

    private void fishQuanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fishQuanKeyPressed
        int i = fishQuan.getText().length();
        char c = evt.getKeyChar();
        
        
           
                if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
                {
                    fishQuan.setEditable(true);
                }
                else if(i>2)
                {
                    fishQuan.setEditable(false);
                }
    }//GEN-LAST:event_fishQuanKeyPressed

    private void fishQuanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fishQuanKeyTyped
        char fish = evt.getKeyChar();
        String Fish = fishQuan.getText();
        if(!(Character.isDigit(fish)) || (fish == KeyEvent.VK_BACK_SPACE) || (fish == KeyEvent.VK_DELETE))
                {
                    evt.consume();
                }
        if(Fish.isEmpty())
        {
            warnFish.setVisible(true);
        }
        else if(Fish.length()>0)
        {
            warnFish.setVisible(false);
        }
    }//GEN-LAST:event_fishQuanKeyTyped

    private void paklayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paklayActionPerformed
        if(paklay.isSelected())
        {
           pakQuan.setEnabled(true);
           pakQuan.setEditable(true);
           
           if(pakQuan.getText().isEmpty())
           {
               warnPak.setVisible(true);
           }
        }
        else
        {
           pakQuan.setEnabled(false);
           pakQuan.setEditable(false);
           pakQuan.setText("");
           warnPak.setVisible(false);
        }
    }//GEN-LAST:event_paklayActionPerformed

    private void fryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fryKeyPressed
        int i = fry.getText().length();
        char c = evt.getKeyChar();
        
        
           
                if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
                {
                    fry.setEditable(true);
                }
                else if(i>5)
                {
                    fry.setEditable(false);
                }
    }//GEN-LAST:event_fryKeyPressed

    private void quanCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quanCKeyPressed
        int i = quanC.getText().length();
        char c = evt.getKeyChar();
        
        
           
                if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
                {
                    quanC.setEditable(true);
                }
                else if(i>4)
                {
                    quanC.setEditable(false);
                }
    }//GEN-LAST:event_quanCKeyPressed

    private void quanTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quanTKeyPressed
        int i = quanT.getText().length();
        char c = evt.getKeyChar();
        
        
           
                if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
                {
                    quanT.setEditable(true);
                }
                else if(i>4)
                {
                    quanT.setEditable(false);
                }
    }//GEN-LAST:event_quanTKeyPressed

    private void quanTntKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quanTntKeyPressed
        int i = quanTnt.getText().length();
        char c = evt.getKeyChar();
        
        
           
                if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
                {
                    quanTnt.setEditable(true);
                }
                else if(i>4)
                {
                    quanTnt.setEditable(false);
                }
    }//GEN-LAST:event_quanTntKeyPressed

    private void quanCKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quanCKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))
                {
                    evt.consume();
                }
    }//GEN-LAST:event_quanCKeyTyped

    private void quanTKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quanTKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))
                {
                    evt.consume();
                }
    }//GEN-LAST:event_quanTKeyTyped

    private void quanTntKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quanTntKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))
                {
                    evt.consume();
                }
    }//GEN-LAST:event_quanTntKeyTyped

    private void reserve1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserve1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reserve1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton bday;
    private javax.swing.JTextField beafQuan;
    private javax.swing.JCheckBox bihon;
    private javax.swing.JTextField bihonQuan;
    private javax.swing.JCheckBox buko;
    private javax.swing.JCheckBox chair;
    private org.jdesktop.swingx.JXDatePicker date;
    private javax.swing.JCheckBox dugo;
    private javax.swing.JTextField dugoQuan;
    private javax.swing.ButtonGroup event;
    private javax.swing.JTextField fishQuan;
    private javax.swing.JCheckBox fried;
    private javax.swing.JTextField fry;
    private javax.swing.JCheckBox glass;
    private javax.swing.JCheckBox humba;
    private javax.swing.JTextField humbaQuan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JSeparator jSeparator1;
    public javax.swing.JTextField jTextField1;
    private javax.swing.JCheckBox lechon;
    private javax.swing.JTextField lechonQuan;
    private javax.swing.JTextField lump;
    private javax.swing.JCheckBox lumpia;
    private javax.swing.JCheckBox mac;
    private javax.swing.JCheckBox mango;
    private javax.swing.JTextField pakQuan;
    private javax.swing.JCheckBox paklay;
    private javax.swing.JCheckBox plas;
    private javax.swing.JTextField quanC;
    private javax.swing.JTextField quanG;
    private javax.swing.JTextField quanP;
    private javax.swing.JTextField quanT;
    private javax.swing.JTextField quanTnt;
    private javax.swing.JButton reserve;
    private javax.swing.JButton reserve1;
    private javax.swing.JButton review;
    private javax.swing.JCheckBox steak;
    private javax.swing.JCheckBox sweet;
    private javax.swing.JCheckBox table;
    private javax.swing.JCheckBox tap;
    private javax.swing.JCheckBox tent;
    private javax.swing.JLabel warnBeaf;
    private javax.swing.JLabel warnBihon;
    private javax.swing.JLabel warnC;
    private javax.swing.JLabel warnDugo;
    private javax.swing.JLabel warnFish;
    private javax.swing.JLabel warnFried;
    private javax.swing.JLabel warnG;
    private javax.swing.JLabel warnHumba;
    private javax.swing.JLabel warnLechon;
    private javax.swing.JLabel warnLumpia;
    private javax.swing.JLabel warnP;
    private javax.swing.JLabel warnPak;
    private javax.swing.JLabel warnT;
    private javax.swing.JLabel warnTnt;
    private javax.swing.JRadioButton wed;
    // End of variables declaration//GEN-END:variables
}
